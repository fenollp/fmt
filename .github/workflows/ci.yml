name: go
on:
  # pull_request:
  push:

jobs:
  test-install:
    strategy:
      fail-fast: true
      matrix:
        go: ['1.x']
        # https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idruns-on
        os:
        - ubuntu-20.04
        # - windows-2022 TODO
        - macos-11
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    name: buildkit on ${{ matrix.os }}
    steps:
    - uses: docker-practice/actions-setup-docker@v1
      if: runner.os == 'macOS'
    - run: docker version
    - uses: docker/login-action@v3
      if: ${{ github.actor != 'dependabot[bot]' }}
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - uses: actions/checkout@v2
    - run: DOCKER_BUILDKIT=1 docker build --platform=local --output=. --progress=plain .
    - run: ./fmtd*

  build-and-test:
    env:
      GO111MODULE: 'on'
      CGO_ENABLED: '0'
    strategy:
      fail-fast: true
      matrix:
        go: ['1.x']
        os:
        - ubuntu-20.04
        # - windows-2022 TODO
        - macos-11
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    name: ${{ matrix.go }} on ${{ matrix.os }}
    steps:
    - uses: docker-practice/actions-setup-docker@v1
      if: runner.os == 'macOS'

    - run: docker version
    - uses: docker/login-action@v3
      if: ${{ github.actor != 'dependabot[bot]' }}
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go }}

    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - run: echo ${{ steps.go-cache-paths.outputs.go-build }}
    - run: echo ${{ steps.go-cache-paths.outputs.go-mod }}

    - name: Go Build Cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-${{ matrix.go }}-build-${{ hashFiles('**/go.sum') }}

    - name: Go Mod Cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-${{ matrix.go }}-mod-${{ hashFiles('**/go.sum') }}


    - uses: actions/checkout@v2

    - run: go mod download && go mod tidy && go mod verify
    - if: runner.os == 'Linux'
      run: git --no-pager diff --exit-code

    - run: go vet -tags osusergo ./...
    - if: runner.os == 'Linux'
      run: git --no-pager diff --exit-code

    - run: go fmt ./...
    - if: runner.os == 'Linux'
      run: git --no-pager diff --exit-code

    - run: go test -tags osusergo -v ./...
    - if: runner.os == 'Linux'
      run: git --no-pager diff --exit-code

    - name: Ensure fmtd Dockerfile ARGs are all (no more no less) mentioned in README
      run: |
        [[ $(git grep -Fc 'export ARG_' README.md | cut -d: -f2) -eq $(cat fmtd.go | grep -vF ALPINE | grep -Fc 'ARG ' | cut -d: -f2) ]]
